docker-compose.yml:
version: '3.8'

services:
  nginx:
    image: challenge3-nginx
    build:
      context: ./nginx
    ports:
      - "8080:80"
    depends_on:
      - node-service

  node-service:
    image: challenge3-node-service
    build:
      context: ./api
    environment:
      - DB_HOST=db
      - DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    ports:
      - "3000:3000"
    depends_on:
      - db

  db:
    image: mariadb
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"



.env
# Application config
DB_ROOT_PASSWORD=your_root_password
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password
DB_HOST=db
# Database config
MYSQL_ROOT_PASSWORD=your_root_password
MYSQL_DATABASE=your_database_name
MYSQL_USER=your_username
MYSQL_PASSWORD=your_password
MYSQL_HOST=db







docker-compose.yml:

This file defines the services required for the application: nginx, node-service, and db.
It specifies the Docker images to use for each service, along with build contexts if custom images are to be built.
Ports are mapped to allow access to the services from the host machine.
Environment variables are provided for configuring the services, such as database credentials and hostnames.
Dependencies between services are defined using the depends_on directive.


.env:

This file contains environment variables used to configure the services defined in the docker-compose.yml file.
It provides values for database-related configuration variables like root password, database name, username, and password.


Commands used:

docker-compose build: Builds the Docker containers defined in the docker-compose.yml file.
docker-compose up -d: Starts the Docker containers in detached mode.
docker-compose ps: Checks the status of the Docker containers and displays information about them, such as names, images, commands, and ports.